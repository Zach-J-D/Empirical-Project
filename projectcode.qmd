---
title: 'TBD'
format:
    pdf:
        toc: true
        fontsize: 10pt
        geometry: margin=0.6in
---

# Importing the Data
```{python}
# Importing the relevant modules and tools necessary

import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib as plt 
from statsmodels.regression.linear_model import OLS
from statsmodels.tools import add_constant
from functools import reduce
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.outliers_influence import variance_inflation_factor

# Since the wage and interest rate data was monthly, have to adjust it
# Involves resampling this data into quarterly format for analysis later on
# For wages, took the mean of the period
# For interest rates, took the rate at the end of the quarter

wages_path = Path('Data') / 'wages.csv'
wages_df = pd.read_csv(wages_path)
wages_df['Date'] = pd.to_datetime(wages_df['Date'], format = 'mixed')
wages_df.set_index('Date', inplace = True)
quarterly_wages_df = wages_df.resample('QE-MAR').mean()
quarterly_wages_df.index = quarterly_wages_df.index.to_period('Q')

rates_path = Path('Data') / 'interest_rates.csv'
rates_df = pd.read_csv(rates_path)
rates_df['Date'] = pd.to_datetime(rates_df['Date'], format = 'mixed')
rates_df.set_index('Date', inplace = True)
quarterly_rates_df = rates_df.resample('QE-MAR').last()
quarterly_rates_df.index = quarterly_rates_df.index.to_period('Q')

# Creating the first dataframe, joining on the 'Date'column

first_df = pd.merge(quarterly_wages_df, quarterly_rates_df, on = ['Date'])


# Since the rest of the data was quarterly and in a similar format
# Wrote a function that could sort and create the dataframesy
# Takes file path, reads in data, much of the data was 2000 Q1
# However this isn't recognised and requires 2000-Q1 format instead
# If data was 2000-Q1, nothing is changed 

def create_df(dataset, column = 'Date', folder = 'Data'):
    dataset_path = Path(folder) / dataset
    try:
        new_df = pd.read_csv(dataset_path)
    except FileNotFoundError:
        print(f'File {dataset} not found in folder {folder}')
    if column in new_df.columns:
        new_df[column] = pd.PeriodIndex((new_df[column].str.replace(' ', '-')), freq = 'Q')
    return new_df


# Importing the rest of the data into dataframes

inflation_df = create_df('inflation.csv')
RoR_df = create_df('rate_of_return.csv')
productivity_df = create_df('productivity.csv')
unemployment_df = create_df('unemployment.csv')
OECD_growth_df = create_df('OECD_growth.csv')
investment_df = create_df('investment_growth.csv')


# Creating a dataframe with real (inflation adjusted) values in for future use 

real_variables_df = pd.merge(first_df, inflation_df, on = ['Date'])

real_variables_df['Real Wage Growth(%)'] = (real_variables_df['Wage Growth(%)'] - real_variables_df['Inflation(%)'])

real_variables_df['Real Interest Rate(%)'] = (real_variables_df['Bank Rate(%)'] - real_variables_df['Inflation(%)'])

real_variables_df

```


# The OLS Regression 
```{python}

# First going to gather all dataframes

all_dfs = [first_df, inflation_df, RoR_df, unemployment_df, productivity_df, OECD_growth_df, investment_df]

# Then perform a merge on the 'Date' column 

analysis_df = reduce(lambda left, right: pd.merge(left, right, on = ['Date'], how ='inner'), all_dfs)

ols_regression_df = analysis_df.drop('Date', axis = 1)

# Catergorising my variables and ensuring the columns exist

dep_var = 'Wage Growth(%)'
indep_var = ['Bank Rate(%)', 'Inflation(%)', 'Net Rate of Return(%)', 'Unemployment Rate(%)', 'Output per Worker Change(%)', 'OECD Economic Growth(%)', 'Business Investment Growth(%)']

assert dep_var in ols_regression_df.columns, "'Wage Growth(%)' is not recognsied"
for column in indep_var:
    assert column in ols_regression_df.columns, f"'{column}' is not recognised"

# Dropping the 4 NaN values at the start of the wage column 
# This is because the data starts at 2000 so there's obviously no data for the first year's quarters

ols_regression_df = ols_regression_df.dropna()

# Creating my Y and X values for the regression 

Y = ols_regression_df[dep_var]
X = ols_regression_df[indep_var]


# Runinng the OLS regression and printing the results

ols_regression = OLS(Y, add_constant(X)).fit(cov_type = 'HC1')  
print(ols_regression.summary())
ols_regression_df.columns

```

# Validation Tests
```{python}

bp_test = het_breuschpagan(ols_regression.resid, ols_regression.model.exog)
print('BP results are', bp_test)